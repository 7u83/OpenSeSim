/*
 * Copyright (c) 2017, 7u83 <7u83@mail.ru>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package gui;

import java.awt.Frame;
import java.util.Iterator;
import java.util.TreeMap;
import org.json.JSONException;
import org.json.JSONObject;
import sesim.AutoTraderGui;
import sesim.AutoTraderInterface;

/**
 * Dialog for creating, editing, and removing trading strategies. Displays the
 * GUI of the selected strategy and allows saving changes.
 *
 * Author: 7u83 <7u83@mail.ru>
 */
public final class EditStrategiesDialog extends EscDialog {

    /**
     * Currently selected AutoTrader
     */
    transient AutoTraderInterface currentAutoTrader = null;

    /**
     * GUI component of the current AutoTrader
     */
    AutoTraderGui acgui;

    /**
     * Map of all strategies, sorted by name
     */
    TreeMap<String, JSONObject> strategies = new TreeMap<>();

    /**
     * Constructor.
     *
     * @param parent Parent frame
     * @param modal Modal dialog flag
     */
    public EditStrategiesDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        this.setLocationRelativeTo(this.getParent());
        String lastUsed = Globals.prefs_new.get("last_edited_strategy", null);
        initComboBox();

        pack();
        setMinimumSize(getSize());

        System.out.printf("Last used %s\n", lastUsed);
        strategySelectComboBox.setSelectedItem(lastUsed);
    }

    /**
     * Initializes the strategy ComboBox with all available strategies.
     */
    void initComboBox() {

        this.reloadStrategyConfigs();

        this.strategySelectComboBox.removeAllItems();

        /*        
        ArrayList<String> sn = Globals.tloader.getDefaultStrategyNames();
         */
        Iterator<String> i = strategies.keySet().iterator();
        while (i.hasNext()) {

            this.strategySelectComboBox.addItem(i.next());
        }

    }

    /**
     * Loads all strategy configurations from Globals and stores them in the
     * map.
     */
    private void reloadStrategyConfigs() {

        strategies = new TreeMap<>();
        JSONObject cfgs = Globals.getStrategies();

        Iterator<String> i = cfgs.keys();
        while (i.hasNext()) {
            String k = i.next();
            JSONObject o = cfgs.getJSONObject(k);
            strategies.put(k, o);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        strategySelectComboBox = new javax.swing.JComboBox<>();
        scrollPane = new javax.swing.JScrollPane();
        guiPanel = new javax.swing.JPanel();
        defaultGuiPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        saveAsButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        baseLabel = new javax.swing.JLabel();

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("No config available");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        strategySelectComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        strategySelectComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strategySelectComboBoxActionPerformed(evt);
            }
        });

        scrollPane.setViewportBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        guiPanel.setLayout(new java.awt.BorderLayout());

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("No config available");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout defaultGuiPanelLayout = new javax.swing.GroupLayout(defaultGuiPanel);
        defaultGuiPanel.setLayout(defaultGuiPanelLayout);
        defaultGuiPanelLayout.setHorizontalGroup(
            defaultGuiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defaultGuiPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 620, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(99, Short.MAX_VALUE))
        );
        defaultGuiPanelLayout.setVerticalGroup(
            defaultGuiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defaultGuiPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE)
                .addContainerGap())
        );

        guiPanel.add(defaultGuiPanel, java.awt.BorderLayout.CENTER);

        scrollPane.setViewportView(guiPanel);

        saveButton.setMnemonic('s');
        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        closeButton.setMnemonic('c');
        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        saveAsButton.setMnemonic('a');
        saveAsButton.setText("Save as ...");
        saveAsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsButtonActionPerformed(evt);
            }
        });

        removeButton.setMnemonic('r');
        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        newButton.setMnemonic('n');
        newButton.setText("New ...");
        newButton.setToolTipText("");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });

        baseLabel.setText("base");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 225, Short.MAX_VALUE)
                        .addComponent(newButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveAsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton)
                        .addGap(9, 9, 9))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(baseLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(strategySelectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(strategySelectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(baseLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(closeButton)
                    .addComponent(saveAsButton)
                    .addComponent(removeButton)
                    .addComponent(newButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handles selection of a strategy in the ComboBox. Loads the corresponding
     * GUI or displays the default panel.
     */
    private void strategySelectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_strategySelectComboBoxActionPerformed

        JSONObject cfgs = Globals.getStrategies();
        String selectedStrategy = (String) this.strategySelectComboBox.getSelectedItem();

        if (selectedStrategy == null) {
            // No strategy selected -> show default panel
            guiPanel.removeAll();
            guiPanel.add(this.defaultGuiPanel, java.awt.BorderLayout.CENTER);
            scrollPane.setViewportView(defaultGuiPanel);
            this.defaultGuiPanel.setVisible(true);
            return;
        }

        String base;
        JSONObject o = null;
        try {
            o = (JSONObject) cfgs.get(selectedStrategy);

            base = o.getString("base");

        } catch (JSONException e) {

            base = selectedStrategy;

        }

        //Globals.LOGGER.info(String.format("Base %s\n", base));
        currentAutoTrader = Globals.sim.tloader.getStrategyBase(base);
        if (currentAutoTrader == null) {
            sesim.Logger.error(String.format("Can't load trader: %s\n", base));
            return;
        }

        currentAutoTrader.setConfig(o);
        this.baseLabel.setText(base);

        acgui = currentAutoTrader.getGui();
        guiPanel.removeAll();
        if (acgui != null) {
            //this.initGuiPanel();
            guiPanel.add(acgui, java.awt.BorderLayout.CENTER);
            scrollPane.setViewportView(acgui);
            acgui.setVisible(true);

        } else {

            guiPanel.add(this.defaultGuiPanel, java.awt.BorderLayout.CENTER);
            scrollPane.setViewportView(defaultGuiPanel);
            this.defaultGuiPanel.setVisible(true);
        }
        this.revalidate();
        this.repaint();

        // Remember selected strategy
        Globals.prefs_new.put("last_edited_strategy", selectedStrategy);

    }//GEN-LAST:event_strategySelectComboBoxActionPerformed

    /**
     * Saves the current strategy under its existing name.
     */
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed

        if (currentAutoTrader == null) {
            return;
        }

        if (acgui != null) {
            acgui.save();
        }

        JSONObject strategyCfg = currentAutoTrader.getConfig();
        String strategyName = (String) this.strategySelectComboBox.getSelectedItem();
        strategyCfg.put("base", currentAutoTrader.getClass().getCanonicalName());
        JSONObject cfgs = Globals.getStrategies();
        cfgs.put(strategyName, strategyCfg);
        Globals.putStrategies(cfgs);


    }//GEN-LAST:event_saveButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        String selected = (String) this.strategySelectComboBox.getSelectedItem();
        JSONObject cfgs = Globals.getStrategies();
        cfgs.remove(selected);
        Globals.putStrategies(cfgs);
        this.acgui = null;
        this.currentAutoTrader = null;
        this.initComboBox();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        NewStrategyDialog sd = new NewStrategyDialog((Frame) this.getParent(), true);
        sd.setLocationRelativeTo(this);
        sd.setVisible(true);

        if (sd.result == null) {
            return;
        }

        AutoTraderInterface ac = Globals.sim.tloader.getStrategyBase(sd.result.base);
        JSONObject cfg = ac.getConfig();

        cfg.put("base", ac.getClass().getCanonicalName());

        Globals.saveStrategy(sd.result.name, cfg);
        this.initComboBox();
        this.strategySelectComboBox.setSelectedItem(sd.result.name);
    }//GEN-LAST:event_newButtonActionPerformed

    private void saveAsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsButtonActionPerformed
        if (this.currentAutoTrader == null) {
            return;
        }
        NewStrategyDialog sd = new NewStrategyDialog((Frame) this.getParent(), true,
                this.currentAutoTrader.getClass().getCanonicalName()
        );
        sd.setLocationRelativeTo(this);
        sd.setTitle("Save Straegy as");
        sd.setVisible(true);

        if (sd.result == null) {
            return;
        }

        JSONObject strategyCfg = currentAutoTrader.getConfig();
        String strategyName = sd.result.name;
        strategyCfg.put("base", currentAutoTrader.getClass().getCanonicalName());
        JSONObject cfgs = Globals.getStrategies();
        cfgs.put(strategyName, strategyCfg);
        Globals.putStrategies(cfgs);
        this.initComboBox();
        this.strategySelectComboBox.setSelectedItem(sd.result.name);

    }//GEN-LAST:event_saveAsButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel baseLabel;
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel defaultGuiPanel;
    private javax.swing.JPanel guiPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton newButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton saveAsButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JComboBox<String> strategySelectComboBox;
    // End of variables declaration//GEN-END:variables
}
