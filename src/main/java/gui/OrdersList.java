/*
 * Copyright (c) 2017, tobias
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package gui;

import java.awt.MouseInfo;
import java.awt.Point;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import javax.swing.table.DefaultTableModel;
import sesim.Exchange.Account;
import sesim.Exchange.Order;

/**
 *
 * @author tobias
 */
public class OrdersList extends javax.swing.JPanel {

    public Account account;
    DefaultTableModel model;

    public final void updateModel() {
        if (null == account) {
            return;
        }

        int row = 0;

        Iterator<Map.Entry<Long, Order>> it = account.getOrders().entrySet().iterator();
        model.setRowCount(account.getOrders().size());
        while (it.hasNext()) {
            Map.Entry e = it.next();
            Long k = (Long) e.getKey();
            Order o = (Order) e.getValue();

            model.setValueAt(k, row, 0);

            model.setValueAt(((Order) o).getType().toString(), row, 1);

            model.setValueAt(((Order) o).getLimit(), row, 2);
            model.setValueAt(((Order) o).getVolume(), row, 3);
            model.setValueAt(((Order) o).getOrderStatus().toString(), row, 4);
            row++;
        }
        this.table.getRowSorter().allRowsChanged();

    }

    /**
     * Creates new form OrdersList
     */
    public OrdersList() {
        initComponents();
        model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);
        updateModel();
        table.setFillsViewportHeight(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ctxMenu = new javax.swing.JPopupMenu();
        ctxMenuCreateOrder = new javax.swing.JMenuItem();
        ctxMenuCancelOrder = new javax.swing.JMenuItem();
        ctxMenuModifyOder = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        ctxMenuCreateOrder.setText("Create Order");
        ctxMenu.add(ctxMenuCreateOrder);

        ctxMenuCancelOrder.setText("Cancel Order");
        ctxMenu.add(ctxMenuCancelOrder);

        ctxMenuModifyOder.setText("Modify Oder");
        ctxMenu.add(ctxMenuModifyOder);

        table.setAutoCreateRowSorter(true);
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Type", "Limit", "Volume", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 221, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tableMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMousePressed
        System.out.printf("The mouse is here\n");

        Point point = evt.getPoint();
        int currentRow = table.rowAtPoint(point);
        if (currentRow==-1){
            
        }
        else {
        
            table.setRowSelectionInterval(currentRow, currentRow);
        }

        int nbuttons = MouseInfo.getNumberOfButtons();
        int button = evt.getButton();
        if (!evt.isPopupTrigger()) {
            return;
        };

        this.ctxMenu.show(this, evt.getX(), evt.getY());

        System.out.printf("Button %d %d \n", nbuttons, button);

    }//GEN-LAST:event_tableMousePressed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu ctxMenu;
    private javax.swing.JMenuItem ctxMenuCancelOrder;
    private javax.swing.JMenuItem ctxMenuCreateOrder;
    private javax.swing.JMenuItem ctxMenuModifyOder;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
