/*
 * Copyright (c) 2017, 7u83 <7u83@mail.ru>
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package traders.ManTrader;

import gui.OpenOrdersList;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import sesim.Account;

import sesim.Exchange;
import sesim.Exchange.Order;
import sesim.Exchange.OrderType;

/**
 *
 * @author 7u83 <7u83@mail.ru>
 */
public class ManTraderConsole extends javax.swing.JPanel {

    public ManTrader trader;
    Account account;
    Exchange se;

    public OpenOrdersList getOrderListPanel() {

        return this.ordersList;
    }

    /**
     * Creates new form ManTraderConsole
     */
    public ManTraderConsole() {
        initComponents();

        //  this.ordersList1.account=trader.getAccount();
    }

    public ManTraderConsole(Exchange e, Account a) {
        account = a;
        se = e;
        initComponents();
        this.buyEditOrderPanel.limitSpinner.addChangeListener(
                new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                float p = buyEditOrderPanel.getPrice();
                if (p >= account.getMoney()) {
                    buyButton.setEnabled(false);
                } else {
                    buyButton.setEnabled(true);
                }
            }

        }
        );

        this.buyEditOrderPanel.volumeSpinner.addChangeListener(
                new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                float p = buyEditOrderPanel.getPrice();
                if (p >= account.getMoney()) {
                    buyButton.setEnabled(false);
                } else {
                    buyButton.setEnabled(true);
                }
            }

        }
        );

  /*      this.sellEditOrderPanel.limitSpinner.addChangeListener(
                new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                float v = buyEditOrderPanel.getVolume();
                if (v >= account.getMoney()) {
                    buyButton.setEnabled(false);
                } else {
                    buyButton.setEnabled(true);
                }
            }

        }
        );*/

        this.sellEditOrderPanel.volumeSpinner.addChangeListener(
                new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                float v = sellEditOrderPanel.getVolume();
                if (v >= account.getShares()) {
                    sellButton.setEnabled(false);
                } else {
                    sellButton.setEnabled(true);
                }
            }

        }
        );

    }

    void init(Account a) {
        this.ordersList.initOrderList(account);
    }

    void doUpdate(Account a) {
        this.ordersList.updateModel();
        this.accountBalance2.updateBalance(a);

        //     this.consoleDialog.getOrderList().updateModel();
        //this.consoleDialog.getBalancePanel().updateBalance(o.getAccount());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        ordersList = new gui.OpenOrdersList();
        jPanel1 = new javax.swing.JPanel();
        accountBalance2 = new traders.ManTrader.AccountBalance();
        buyButton = new javax.swing.JButton();
        sellEditOrderPanel = new EditOrderPanel(se,account,OrderType.SELLLIMIT);
        buyEditOrderPanel = new EditOrderPanel(se,account,OrderType.BUYLIMIT);
        sellButton = new javax.swing.JButton();

        jTabbedPane1.addTab("Open Orders", ordersList);

        buyButton.setBackground(new java.awt.Color(153, 255, 153));
        buyButton.setText("Buy");
        buyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyButtonActionPerformed(evt);
            }
        });

        sellButton.setBackground(new java.awt.Color(255, 153, 153));
        sellButton.setText("Sell");
        sellButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(sellButton, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sellEditOrderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(buyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buyEditOrderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(accountBalance2, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(accountBalance2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(buyEditOrderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sellEditOrderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sellButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyButtonActionPerformed

        float vol = this.buyEditOrderPanel.getVolume();
        float limit = this.buyEditOrderPanel.getLimit();
     
        synchronized (se.timer) {
            Order o = se.createOrder(account, OrderType.BUYLIMIT, vol, limit);

        }

    }//GEN-LAST:event_buyButtonActionPerformed

    private void sellButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellButtonActionPerformed
        float vol = this.sellEditOrderPanel.getVolume();
        float limit = this.sellEditOrderPanel.getLimit();
  //      System.out.printf("buy button pressed, v: %f, l: %f\n", vol, limit);
        synchronized (se.timer) {
            Order o = se.createOrder(account, OrderType.SELLLIMIT, vol, limit);

        }
    }//GEN-LAST:event_sellButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private traders.ManTrader.AccountBalance accountBalance2;
    private javax.swing.JButton buyButton;
    private traders.ManTrader.EditOrderPanel buyEditOrderPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private gui.OpenOrdersList ordersList;
    private javax.swing.JButton sellButton;
    private traders.ManTrader.EditOrderPanel sellEditOrderPanel;
    // End of variables declaration//GEN-END:variables
}
